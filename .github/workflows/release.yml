name: Release

on:
  workflow_dispatch:
    inputs:
      branch:
        type: string
        description: Branch name to release
        required: true
        default: main
      section:
        type: choice
        description: Semver section to increment
        options:
          - PATCH
          - MINOR
          - MAJOR
          - RERUN
          - MANUAL
        required: true
        default: PATCH
      snapshot:
        type: boolean
        description: Use snapshot repository
        required: true
        default: false
      version:
        type: string
        description: |
          Manually defined version (like: 1.2.3, 1.2.3-suffix)
        required: false
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      # Just for debug
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: "refs/heads/${{ inputs.branch }}"
          token: ${{ secrets.CI_TOKEN }}
          # Required to deduce version from git tags
          fetch-depth: 0

      - name: Validate build succeeded
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          declare -r SHA="$(git rev-parse HEAD)"
          declare -r BUILD_SUCCESS="$(gh api \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/actions/runs?status=success\&head_sha=$SHA \
            | jq 'limit(1; .workflow_runs[] | select(.name == "Build" and .conclusion == "success"))')"
          if [ -z "$BUILD_SUCCESS" ]; then
            echo "Commit did not pass Build!"
            echo "SHA: $SHA"
            exit 1
          fi

      - name: Get versions
        id: versions
        env:
          SNAPSHOT: ${{ inputs.snapshot }}
          MANUAL_VERSION: ${{ inputs.version }}
          INCREMENT_SECTION: ${{ inputs.section }}
        run: |
          declare -r GIT_VERSION="$(git tag -l 'v[0-9]*' --merged HEAD --sort=-v:refname | grep -E "^v[0-9]+.[0-9]+.[0-9]+$" | head -n 1 | cut -c2-)"
          declare -r VERSION=${GIT_VERSION:-0.0.0}
          declare -r MAJOR="$(echo "$VERSION" | cut -d. -f1)"
          declare -r MINOR="$(echo "$VERSION" | cut -d. -f2)"
          declare -r PATCH="$(echo "$VERSION" | cut -d. -f3)"
          declare NEXT_VERSION=""
          if [ "$INCREMENT_SECTION" == "MANUAL" ]; then
            if [[ "$MANUAL_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-.+)?$ ]]; then
              NEXT_VERSION="$MANUAL_VERSION"
            else
              echo "Invalid manual version: $MANUAL_VERSION" >&2
              echo "Expected versions formats: 12.34.56, 1.2.3-some-suffix" >&2
              exit 1
            fi
          elif [ "$INCREMENT_SECTION" == "PATCH" ]; then
            NEXT_VERSION="$MAJOR.$MINOR.$(( PATCH + 1 ))"
          elif [ "$INCREMENT_SECTION" == "MINOR" ]; then
            NEXT_VERSION="$MAJOR.$(( MINOR + 1 )).0"
          elif [ "$INCREMENT_SECTION" == "MAJOR" ]; then
            NEXT_VERSION="$(( MAJOR + 1 )).0.0"
          elif [ "$INCREMENT_SECTION" == "RERUN" ]; then
            NEXT_VERSION="$VERSION"
            git tag -d "v$NEXT_VERSION" || echo "Local tag does not exist: v$NEXT_VERSION"
            git push --delete origin "v$NEXT_VERSION" || echo "Remote tag does not exist: v$NEXT_VERSION"
          else
            echo "Unrecognized option: $INCREMENT_SECTION" >&2
            exit 1
          fi
          if [ "$SNAPSHOT" == "false" ] && [[ "$NEXT_VERSION" =~ ^.*-SNAPSHOT$ ]] ; then
            echo "Invalid manual version: $MANUAL_VERSION" >&2
            echo "Manual version with SNAPSHOT suffix should be published to snapshot repository" >&2
            return 1
          fi
          if [ "$SNAPSHOT" == "true" ] && ! [[ "$NEXT_VERSION" =~ ^.*-SNAPSHOT$ ]]; then
            NEXT_VERSION="${NEXT_VERSION}-SNAPSHOT"
          fi
          echo -e "VERSION: $VERSION\nNEXT_VERSION: $NEXT_VERSION"
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Import gpg key
        id: gpg
        uses: crazy-max/ghaction-import-gpg@v6
        if: inputs.snapshot == false
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_committer_name: Coditory Bot
          git_committer_email: bot@coditory.com

      - name: Update version in files
        id: commit
        if: inputs.snapshot == false
        env:
          PREV_VERSION: ${{ steps.versions.outputs.version }}
          NEXT_VERSION: ${{ steps.versions.outputs.next_version }}
        run: |
          declare -r ESC_PREV_VERSION="${PREV_VERSION//./\\.}"
          echo "Changing: $PREV_VERSION -> $NEXT_VERSION"
          sed -i "s|${ESC_PREV_VERSION}|${NEXT_VERSION}|" README.md
          sed -i "s|^version=${ESC_PREV_VERSION}|version=${NEXT_VERSION}|" gradle.properties
          if [ "$NEXT_VERSION" == "${NEXT_VERSION%%-SNAPSHOT}" ]; then
            if [ -n "$(git status --porcelain)" ]; then
              git add -A
              # commit must not have "[skip ci]" as it is required to pass build action
              git commit -a -m "Update version $PREV_VERSION -> $NEXT_VERSION"
              git push
              echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
            else
              echo "Nothing changed. Skipping commit."
            fi
          else
            echo "Skipping committing updated version in config files for SNAPSHOT version."
          fi

      - name: Create Release Tag
        id: tag
        if: inputs.snapshot == false
        env:
          NEXT_VERSION: ${{ steps.versions.outputs.next_version }}
        run: |
          declare -r TAG_NAME="v$NEXT_VERSION"
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"
          echo "name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Publish Snapshot to Maven Central
        if: inputs.snapshot == true
        env:
          NEXT_VERSION: ${{ steps.versions.outputs.next_version }}
        run: |
          echo "Simulating snapshot publish to maven central..."
          echo "### Published snapshot version $NEXT_VERSION ðŸš€" >> $GITHUB_STEP_SUMMARY

      - name: Publish Release to Maven Central
        id: publish
        if: inputs.snapshot == false
        env:
          NEXT_VERSION: ${{ steps.versions.outputs.next_version }}
        run: |
          echo "Simulating release publish to maven central..."
          echo "### Published release version $NEXT_VERSION ðŸš€" >> $GITHUB_STEP_SUMMARY

      - name: Drop tag and revert version commit on failure
        if: failure() && steps.publish.conclusion == 'failure'
        env:
          TAG_NAME: ${{ steps.tag.outputs.name }}
          COMMIT_SHA: ${{ steps.commit.outputs.sha }}
        run: |
          if [ -n "$TAG_NAME" ]; then
            git tag --delete "$TAG_NAME"
            git push --delete origin "$TAG_NAME"
            echo "Deleted tag: $TAG_NAME"
          fi
          if [ -n "$COMMIT_SHA" ]; then
            git revert "$COMMIT_SHA"
            git push
            echo "Reverted version commit: $COMMIT_SHA"
          fi

      - name: Generate release notes
        id: notes
        if: inputs.snapshot == false
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PREV_VERSION: ${{ steps.versions.outputs.version }}
          NEXT_VERSION: ${{ steps.versions.outputs.next_version }}
          BRANCH: ${{ inputs.branch }}
        run: |
          declare -r NOTES="$(gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/releases/generate-notes \
            -f tag_name="v$NEXT_VERSION" \
            -f target_commitish="$BRANCH" \
            -f previous_tag_name="$([ "$PREV_VERSION" == "0.0.0" ] && echo "" || echo "v$PREV_VERSION")" \
            | jq -r '.body')"
          declare -r ESCAPED="${NOTES//$'\n'/'%0A'}"
          echo ">>>> NOTES"
          echo "$NOTES"
          echo ">>>> ESCAPED"
          echo "$ESCAPED"
          echo "notes=$ESCAPED" >> $GITHUB_OUTPUT

      - name: Create github release
        if: |
          inputs.snapshot == false
          && steps.notes.conclusion == 'success'
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          body: ${{ steps.notes.outputs.notes }}
          draft: ${{ inputs.publish == 'SKIP' }}
          tag: v${{ steps.versions.outputs.next_version }}
          token: ${{ secrets.GITHUB_TOKEN }}